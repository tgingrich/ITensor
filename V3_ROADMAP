(! means necessary / blocker for releasing v3)

o Add alternative to niter which starts at 1. Solver iterations? Eigen iterations?

! Implement dim(Index) -> long function as preferred alternative to I.m().
  Update documentation (especially ITensor book and Index synopsis).

! Fix removeQNs to work correctly for QDiag -> Diag
  case. Remove the toDense function.

o Improve tags of MPS class
  X Better tag convention for labelling site index (i.e. "x=1" instead of "1" for site 1)
  o Make sure that "Link" index keeps a consistent convention for labelling which link
    (i.e. MPS at site "x=4" should have left link with tags "Link,l=3" and right link with
     tags "Link,l=4")

! Update website:
  o Detailed documentation
    - info about QN blocks in Index objects
    X how to make QN ITensors
    - removeQNs ITensor function
    - removeQNs MPS function
  o List of deprecrations/guide to update code
  o ITensor book
  o Tutorials
  o Code formulas

# Final Release Checks
  ! Fresh install with new options.mk file compiles
  ! Jenkins is passing
  ! All sample codes compile and run and are up to date
  ? Incorporate sample codes into Jenkins/testing 
    (I found the DMRG codes were useful for catching bugs, 
     and TRG is a good test case for Tags)
    Miles say: Yes I agree. We could put copies of the sample codes
    or crucial sections of the sample codes into the unit
    tests. Maybe for the DMRG one just do one sweep.
    Or perhaps better, Dylan can config Jenkins to 
    compile the sample codes.

-----------------------------------------------

Optional (possibly post V3, because not breaking changes):
? PrintMatrix(ITensor,{Index,...},{Index,...}) function
  o Matt: the idea is to make a print function that doesn't just print the data of the ITensor
    as one big list, but instead print it in a grid that makes it look like a matrix. For example,
    for ITensor A with Index's i,j,k,l, PrintMatrix(A,{i,k},{l,j}) 
    prints A as if it were a matrix where the rows run over the combined Index (i,j) and 
    the columns run over the combined index (l,j). I think this is especially useful 
    for QN conserving ITensors, where it could make it easier to visualize
    blocks of the ITensor.
o Implement randomMPS(InitState,m>1)
o Define QDense * Dense contraction directly
o Add back some prime functions:
  o A.primeExcept(plinc=1,index1,index2,...)
  o A.primeExcept(plinc=1,tagset)
  o A.mapPrime(pold1,pnew1,index1,pold2,pnew2,index2,...)
? Add {"Randomize=",true} args for MPS(SiteSet)
  o Right now, just call randomMPS(siteset)
? Error for calls like Index(0,"i"), Index(QN(0),0,"j"), etc.
? Add some more tag functions
  o A.addTags(tagset,imatch1,imatch2,...)
o Make modifying functions member functions and all other functions free
  (at least for externally-facing functions)
  o randomize(ITensor&) -> ITensor::randomize()
? In site sets, make all of the indices have the same ids but different tags



#################################################################################################
Completed (this is to help keep track of changes made, but we should make an official
           list for the website):


o Added .real and .cplx accepting vector<int> (pull #194)
o Added .real(vector<IndexVal>), .cplx(vector<IndexVal>), etc.
o Added errMPOProd and deprecated checkMPOProd
o Test that new QN system allows mixing different site types
  (--> add MixedSiteSet to docs)
o New QN design:
  Store a smallstring along with QN value and mod fac. Storage is an array (fixed-size)
  of triples name-val-modfac.
o Remove IQTensor and IQIndex types, merging with ITensor and Index (also
  removed IQIndexVal, IQMPS, IQMPO, etc)
o All site sets except SiteSet(N,d) default to ConserveQNs=true
o Change default behavior of MPS(sites,m) constructor to be uninitialized MPS of size m
  o m>1 only allowed with no QNs
o Add randomMPS(SiteSet,m=1) function with no QNs
o Add randomMPS(InitState) function for QNs and no QNs
o Restore conversion of AutoMPO to MPO (allowing code like MPO(ampo)).
   o Add deprecation warning to MPO(AutoMPO), telling people to switch
     to toMPO(AutoMPO)
o Depecrate reindex(ITensor,Index,Index,...), replace with replaceInds(ITensor,Index,Index,...)
  that does not ignore prime levels and internally calls delta()
o Add deprecation error for Index("i",3) constructor pointing towards Index(3,...)
o Add deprecation warning for prime(ITensor,Index,int) pointing towards prime(ITensor,int,Index)
o Add read/write for TagSet
o Fix read/write for Index with QNs and test for rest of library
o Remove dependency of itensor/mps/localop.h in itensor/decomp.h (this seemed to be the only itensor/mps/ dependency left in itensor/)
o Deprecate randomTensor, matrixTensor, diagTensor in favor of randomITensor, matrixITensor, diagITensor
o Change name of findIndex(ITensor,Index) -> int to indexPosition(ITensor,Index) -> int
o Add findIndex(ITensor,TagSet,int) -> Index, which finds the Index in the ITensor containing certain tags and matching an optional prime level
o Add unit tests for tags functions (addTags, removeTags, swapTags, replaceTags, setTags)

Recent commits to v2 (master branch):
o errMPOProd and deprecation of checkMPOProd
o More combiner constructors (combiner(IndexSet), combiner(initializer_list), etc.)
o Bugfix for nmultMPO
o More combiner constructors (combiner(IndexSet), combiner(initializer_list), etc.)

