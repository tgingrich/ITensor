(! means necessary / blocker for releasing v3)

? New QN design:
  Store a smallstring along with QN value and mod fac. Storage is an array (fixed-size)
  of triples name-val-modfac.

! Decide about default ConserveQNs of site sets (I think always "true"?)
  If wanting dense by default just use SiteSet(N,d)
! New MPS constructor conventions
  ! Remove MPS.randomize()
  ! Remove randomMPS(SiteSet,m>1)
  ? Add {"Randomize=",true} args for MPS(SiteSet)
  o Implement MPS(InitState,m>1) and randomMPS(InitState,m>1)
! Add read/write for TagSet
! Fix read/write for Index and test for rest of library
! Remove dependency of itensor/mps/localop.h in itensor/decomp.h (this seemed to be the only itensor/mps/ dependency left in itensor/)

? Add back some prime functions:
  o A.primeExcept(plinc=1,index1,index2,...)
  o A.primeExcept(plinc=1,tagset)
? Add some more tag functions
  o A.addTags(tagset,imatch1,imatch2,...) = A.addTags(tagset,imatch1).addTags(tagset,imatch2,...)
o Decide what to do with reindex
  Matt: I think it is still good to have, but would prefer to make a version that
        internally uses `delta` and does not ignore prime levels, so:
        auto A = ITensor(i,j,k);
        auto B = reindex(A,{i,j,k},{l,m,o}); // Or list in pairs like reindex(A,i,l,j,m,k,o)
        // Shorthand for A*delta(i,l)*delta(j,m)*delta(k,o)
        This is particularly useful in case some of the reindexing involves a swap of indices,
        i.e. reindex(A,{i,j,k},{j,i,o}) in the case where i and j are swappable, which in general
        could become quite tedious to do by hand.
o Make modifying functions member functions and all other functions free
  (at least for externally-facing functions)
  o randomize(ITensor&) -> ITensor::randomize()
o Need to add some commits from master
  o errMPOProd and deprecation of checkMPOProd
  o More combiner constructors (combiner(IndexSet), combiner(initializer_list), etc.)

o Fix Heisenberg.h dependency for idmrg (or incorporate Anna's inf. AutoMPO pull request)
o Update website:
  o Detailed documentation
  o ITensor book
  o Tutorials
  o Code formulas
o Code cleanup
o Add unit tests for tags functions
  o addTags, removeTags, swapTags, etc.

Optional (possibly post V3)
o Define QDense * Dense contraction directly

# Final Release Checks
  ! Fresh install with new options.mk file compiles
  ! Jenkins is passing
  ! All sample codes compile and run
  ? Incorporate sample codes into Jenkins/testing 
    (I found the DMRG codes were useful for catching bugs, 
     and TRG is a good test case for Tags)
    Miles say: Yes I agree. We could put copies of the sample codes
    or crucial sections of the sample codes into the unit
    tests. Maybe for the DMRG one just do one sweep.
    Or perhaps better, Dylan can config Jenkins to 
    compile the sample codes.


#######################################################################################################
Completed (this is to help keep track of changes made, but we should make an official
           list for the website):

o Change default behavior of MPS(sites,m) constructor to be uninitialized MPS of size m
  o m>1 only allowed with no QNs
o Add randomMPS(sites,m=1) function with no QNs
o Restore conversion of AutoMPO to MPO (allowing code like MPO(ampo)).
   o Add deprecation warning to MPO(AutoMPO), telling people to switch
     to toMPO(AutoMPO)

